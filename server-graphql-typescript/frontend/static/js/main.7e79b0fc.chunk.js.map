{"version":3,"sources":["assets/colors.tsx","pages/Dashboard.tsx","models/react.ts","components/atoms/CounterDisplay.tsx","containers/SocketContainer.tsx","containers/PreSocketContainer.tsx","components/atoms/CircleButton.tsx","pages/ClientPage.tsx","containers/VoteContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colorMap","getOptionLabel","options","id","opt","find","o","background","Object","entries","blue","orange","black","forEach","key","value","CacheControlScope","Dashboard","this","props","votes","data","map","secondlyStat","row","seconds","diffSecond","i","statistic","vc","voteCount","className","width","height","strokeDasharray","dataKey","type","stroke","Component","CounterDisplay","state","count","option","React","SocketContainer","chartData","currentTime","Date","now","valueOf","groups","voteTs","ts","Math","floor","maxSlot","toFixed","Array","from","length","_","slot","filter","g","setState","host","window","location","tls","protocol","indexOf","ws","WebSocket","onopen","setTimeout","close","onSummarize","onmessage","evt","message","JSON","parse","voteTo","prevState","push","gameUrl","target","href","size","bgColor","fgColor","includeMargin","CreateVoteDocument","gql","VoteResultDocument","useVoteResultQuery","baseOptions","ApolloReactHooks","PreSocketContainer","error","loading","allVoteOptions","sort","x","y","label","CircleButton","useMutation","variables","optionId","submitVote","onClick","then","a","voteId","createVote","console","log","ex","alert","ClientPage","VoteContainer","NavMenu","to","Home","App","path","Boolean","hostname","match","apolloClient","ApolloClient","uri","ReactDOM","render","client","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7e79b0fc.chunk.js","sourcesContent":["\ninterface ColorMap {\n    [name: string]: any;\n}\n\nconst colors = {\n    blue: '#007aff',\n    orange: '#ff9559',\n    black: '#000000'\n};\n\nconst colorMap: ColorMap = {};\nObject.entries(colors).forEach(([key, value]): void => {\n    colorMap[key] = value;\n})\n\nexport {\n    colors,\n    colorMap\n};","import React, { Component } from 'react';\nimport './Dashboard.css';\nimport { VoteOption, VotesBetweenTime, VoteCount } from '../models/react';\nimport { VotesBetweenHalfSeconds } from '../models/custom';\n\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport { colorMap } from '../assets/colors';\n\ninterface Props {\n    options: Array<VoteOption>;\n    votes: Array<VotesBetweenTime|VotesBetweenHalfSeconds>;\n}\n\ninterface DynamicType {\n    [name: string]: any;\n}\n\nfunction getOptionLabel(options: Array<VoteOption>, id: string): string {\n    const opt = options.find((o)=>o.id === id);\n    return !opt ? '' : opt.background;\n}\nclass Dashboard extends Component<Props> {\n    render(): JSX.Element {\n        \n        const {options, votes}: Props = this.props;\n        /**\n         * sample\n         * const data = [\n         *  {\n         *      name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\n         *      seconds: '1.5', blue: 3, ornage: 1, black: 2\n         *  },... ]\n         */\n        const data = votes ? votes.map((secondlyStat: VotesBetweenTime|VotesBetweenHalfSeconds) => {\n            const row: DynamicType = {\n                seconds: `${secondlyStat.diffSecond}`\n            };\n            for(const i in secondlyStat.statistic){\n                const vc: VoteCount = secondlyStat.statistic[i];\n                const color: string = getOptionLabel(options, vc.id);\n                row[color] = 1 * vc.voteCount;\n            }\n            const orange = row['orange'] || 0;\n            const blue = row['blue'] || 0;\n            row.black = orange - blue;\n            return row;\n        }) : [];\n\n        return <div className=\"chartHolder\">\n            <LineChart width={730} height={500} data={data}>\n                <CartesianGrid strokeDasharray=\"4 6\" />\n                <XAxis dataKey=\"s\" />\n                <YAxis/>\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"black\" stroke={colorMap['black']} />\n                {\n                    options.map((o)=><Line key={`vote-of-${o.id}`} type=\"monotone\" dataKey={o.background} stroke={colorMap[o.background]} />)\n                }\n            </LineChart>\n        </div>;\n    }\n  }\n\nexport default Dashboard;","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Upload: any;\n};\n\nexport type AdditionalEntityFields = {\n  path?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\nexport type Mutation = {\n   __typename?: 'Mutation';\n  createVoteOption?: Maybe<VoteOption>;\n  createVote?: Maybe<Vote>;\n};\n\n\nexport type MutationCreateVoteOptionArgs = {\n  background: Scalars['String'];\n  label: Scalars['String'];\n};\n\n\nexport type MutationCreateVoteArgs = {\n  ip: Scalars['String'];\n  timestamp: Scalars['Int'];\n  optionId: Scalars['ID'];\n};\n\nexport type Query = {\n   __typename?: 'Query';\n  allVoteOptions: Array<VoteOption>;\n  recentVotes: VotesStatistic;\n};\n\n\nexport type QueryRecentVotesArgs = {\n  seconds: Scalars['Int'];\n};\n\n\nexport type Vote = {\n   __typename?: 'Vote';\n  id: Scalars['ID'];\n  ip: Scalars['String'];\n  timestamp: Scalars['Int'];\n  option: VoteOption;\n};\n\nexport type VoteCount = {\n   __typename?: 'VoteCount';\n  id: Scalars['String'];\n  voteCount: Scalars['Int'];\n};\n\nexport type VoteOption = {\n   __typename?: 'VoteOption';\n  id: Scalars['ID'];\n  label: Scalars['String'];\n  background: Scalars['String'];\n  voteCount: Scalars['Int'];\n  votes?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type VotesBetweenTime = {\n   __typename?: 'VotesBetweenTime';\n  diffSecond: Scalars['Int'];\n  statistic: Array<VoteCount>;\n};\n\nexport type VotesStatistic = {\n   __typename?: 'VotesStatistic';\n  options: Array<VoteOption>;\n  votes: Array<VotesBetweenTime>;\n};\n\nexport type CreateVoteMutationVariables = {\n  optionId: Scalars['ID'];\n};\n\n\nexport type CreateVoteMutation = (\n  { __typename?: 'Mutation' }\n  & { createVote: Maybe<(\n    { __typename?: 'Vote' }\n    & Pick<Vote, 'id'>\n  )>; }\n);\n\nexport type RecentVotesQueryVariables = {\n  seconds: Scalars['Int'];\n};\n\n\nexport type RecentVotesQuery = (\n  { __typename?: 'Query' }\n  & { recentVotes: (\n    { __typename?: 'VotesStatistic' }\n    & { options: Array<(\n      { __typename?: 'VoteOption' }\n      & Pick<VoteOption, 'id' | 'label' | 'background'>\n    )>; votes: Array<(\n      { __typename?: 'VotesBetweenTime' }\n      & Pick<VotesBetweenTime, 'diffSecond'>\n      & { statistic: Array<(\n        { __typename?: 'VoteCount' }\n        & Pick<VoteCount, 'id' | 'voteCount'>\n      )>; }\n    )>; }\n  ); }\n);\n\nexport type VoteResultQueryVariables = {};\n\n\nexport type VoteResultQuery = (\n  { __typename?: 'Query' }\n  & { allVoteOptions: Array<(\n    { __typename?: 'VoteOption' }\n    & Pick<VoteOption, 'id' | 'label' | 'background' | 'voteCount'>\n  )>; }\n);\n\n\nexport const CreateVoteDocument = gql`\n    mutation CreateVote($optionId: ID!) {\n  createVote(optionId: $optionId, ip: \"server\", timestamp: 1) {\n    id\n  }\n}\n    `;\nexport type CreateVoteMutationFn = ApolloReactCommon.MutationFunction<CreateVoteMutation, CreateVoteMutationVariables>;\nexport type CreateVoteProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateVoteMutation, CreateVoteMutationVariables> & TChildProps;\nexport function withCreateVote<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  CreateVoteMutation,\n  CreateVoteMutationVariables,\n  CreateVoteProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, CreateVoteMutation, CreateVoteMutationVariables, CreateVoteProps<TChildProps>>(CreateVoteDocument, {\n      alias: 'createVote',\n      ...operationOptions\n    });\n}\n\n/**\n * __useCreateVoteMutation__\n *\n * To run a mutation, you first call `useCreateVoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateVoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createVoteMutation, { data, loading, error }] = useCreateVoteMutation({\n *   variables: {\n *      optionId: // value for 'optionId'\n *   },\n * });\n */\nexport function useCreateVoteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateVoteMutation, CreateVoteMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateVoteMutation, CreateVoteMutationVariables>(CreateVoteDocument, baseOptions);\n      }\nexport type CreateVoteMutationHookResult = ReturnType<typeof useCreateVoteMutation>;\nexport type CreateVoteMutationResult = ApolloReactCommon.MutationResult<CreateVoteMutation>;\nexport type CreateVoteMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateVoteMutation, CreateVoteMutationVariables>;\nexport const RecentVotesDocument = gql`\n    query RecentVotes($seconds: Int!) {\n  recentVotes(seconds: $seconds) {\n    options {\n      id\n      label\n      background\n    }\n    votes {\n      diffSecond\n      statistic {\n        id\n        voteCount\n      }\n    }\n  }\n}\n    `;\nexport type RecentVotesProps<TChildProps = {}> = ApolloReactHoc.DataProps<RecentVotesQuery, RecentVotesQueryVariables> & TChildProps;\nexport function withRecentVotes<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  RecentVotesQuery,\n  RecentVotesQueryVariables,\n  RecentVotesProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, RecentVotesQuery, RecentVotesQueryVariables, RecentVotesProps<TChildProps>>(RecentVotesDocument, {\n      alias: 'recentVotes',\n      ...operationOptions\n    });\n}\n\n/**\n * __useRecentVotesQuery__\n *\n * To run a query within a React component, call `useRecentVotesQuery` and pass it any options that fit your needs.\n * When your component renders, `useRecentVotesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRecentVotesQuery({\n *   variables: {\n *      seconds: // value for 'seconds'\n *   },\n * });\n */\nexport function useRecentVotesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<RecentVotesQuery, RecentVotesQueryVariables>) {\n        return ApolloReactHooks.useQuery<RecentVotesQuery, RecentVotesQueryVariables>(RecentVotesDocument, baseOptions);\n      }\nexport function useRecentVotesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<RecentVotesQuery, RecentVotesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<RecentVotesQuery, RecentVotesQueryVariables>(RecentVotesDocument, baseOptions);\n        }\nexport type RecentVotesQueryHookResult = ReturnType<typeof useRecentVotesQuery>;\nexport type RecentVotesLazyQueryHookResult = ReturnType<typeof useRecentVotesLazyQuery>;\nexport type RecentVotesQueryResult = ApolloReactCommon.QueryResult<RecentVotesQuery, RecentVotesQueryVariables>;\nexport const VoteResultDocument = gql`\n    query VoteResult {\n  allVoteOptions {\n    id\n    label\n    background\n    voteCount\n  }\n}\n    `;\nexport type VoteResultProps<TChildProps = {}> = ApolloReactHoc.DataProps<VoteResultQuery, VoteResultQueryVariables> & TChildProps;\nexport function withVoteResult<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  VoteResultQuery,\n  VoteResultQueryVariables,\n  VoteResultProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, VoteResultQuery, VoteResultQueryVariables, VoteResultProps<TChildProps>>(VoteResultDocument, {\n      alias: 'voteResult',\n      ...operationOptions\n    });\n}\n\n/**\n * __useVoteResultQuery__\n *\n * To run a query within a React component, call `useVoteResultQuery` and pass it any options that fit your needs.\n * When your component renders, `useVoteResultQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useVoteResultQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useVoteResultQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<VoteResultQuery, VoteResultQueryVariables>) {\n        return ApolloReactHooks.useQuery<VoteResultQuery, VoteResultQueryVariables>(VoteResultDocument, baseOptions);\n      }\nexport function useVoteResultLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<VoteResultQuery, VoteResultQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<VoteResultQuery, VoteResultQueryVariables>(VoteResultDocument, baseOptions);\n        }\nexport type VoteResultQueryHookResult = ReturnType<typeof useVoteResultQuery>;\nexport type VoteResultLazyQueryHookResult = ReturnType<typeof useVoteResultLazyQuery>;\nexport type VoteResultQueryResult = ApolloReactCommon.QueryResult<VoteResultQuery, VoteResultQueryVariables>;","import React from 'react';\nimport './CounterDisplay.css';\nimport { VoteOption } from '../../models/react';\n\ntype CounterDisplayProps = {\n  option: VoteOption;\n  count: number;\n};\n\ntype CounterDisplayState = {\n  count: number;\n}\n\nclass CounterDisplay extends React.Component<CounterDisplayProps, CounterDisplayState> {\n    constructor(props: CounterDisplayProps){\n        super(props);\n        this.state = {\n            count: 0\n        };\n    }\n\n    public render(): JSX.Element {\n        const {option:{background}, count} = this.props;\n        // const {count} = this.state;\n        \n        return <div className=\"counter-display-box-wrapper\">\n            <div className={`counter-display-box counter-display-${background}`} >\n                {count}\n            </div>\n        </div>\n    }\n}\n\nexport default CounterDisplay;","import React from 'react';\nimport QrCode from 'qrcode.react';\nimport Dashboard from '../pages/Dashboard';\nimport { VoteCount, VoteOption } from '../models/react';\nimport { VotesBetweenHalfSeconds } from '../models/custom';\nimport CounterDisplay from '../components/atoms/CounterDisplay';\n\ninterface DynamicMap{\n    [name: string]: Array<number>;\n}\n\ninterface SocketState {\n    votes: DynamicMap;\n    chartData: Array<VotesBetweenHalfSeconds>;\n}\n\ninterface GameVoteMessage {\n    voteTo: string;\n}\n\ninterface PreSocketProps {\n    options: Array<VoteOption>;\n}\n\ntype VoteGroup = {\n    id: string;\n    voteTs: Array<string>;\n}\n\n\nclass SocketContainer extends React.Component<PreSocketProps, SocketState> {\n\n    constructor(props: PreSocketProps) {\n        super(props);\n        this.state = {\n            votes: {},\n            chartData: []\n        };\n    }\n\n    onSummarize(): void {\n        const currentTime = Date.now().valueOf();\n        const maxSlot = 10;\n        const {votes} = this.state;\n        const groups: Array<VoteGroup> = Object.entries(votes).map(([id, voteTimes]): VoteGroup=>{\n            const voteTs = voteTimes.map((ts): string => Math.floor(maxSlot - 1 - (currentTime-ts) / 500).toFixed(0));\n            return {\n                id,\n                voteTs\n            };\n        });\n        const chartData: Array<VotesBetweenHalfSeconds> = Array.from({length: maxSlot}, (_, slot: number): VotesBetweenHalfSeconds => {\n            const key = slot.toFixed();\n            const name = (slot / 2).toFixed(1);\n\n            const statistic: Array<VoteCount> = groups.map(({id, voteTs}: VoteGroup): VoteCount=>{\n                const voteCount = voteTs.filter((g)=> g === key).length;\n                return {\n                    id,\n                    voteCount\n                };\n            });\n\n            return {\n                diffSecond: name,\n                statistic\n            };\n        });\n        this.setState({\n            chartData\n        });\n    }\n\n    public componentDidMount(): void {\n        const host = window.location.host;\n        const tls = window.location.protocol.indexOf('s:')>0;\n        const ws = new WebSocket(`${tls?'wss':'ws'}://${host}/game`);\n        ws.onopen = (): void => {\n            setTimeout((): void=>{\n                ws.close();\n                this.onSummarize();\n            }, 5000);\n        }\n        ws.onmessage = (evt: MessageEvent): void => {\n            const message: GameVoteMessage = JSON.parse(evt.data);\n            if(message.voteTo) {\n                this.setState((prevState: SocketState) => {\n                    const {votes} = prevState;\n                    if(!votes[message.voteTo]) {\n                        votes[message.voteTo] = [];\n                    }\n                    votes[message.voteTo].push(Date.now().valueOf());\n                    return {\n                        votes\n                    };\n                })\n            }\n        };\n    }\n\n    public render(): JSX.Element {\n        const {options} = this.props;\n        const {votes} = this.state;\n        const {chartData} = this.state;\n\n        const gameUrl = `http://${window.location.host}/client`;\n        return (<div>\n            \n            <Dashboard options={options} votes={chartData} />\n\n            <div>\n                {options ? options.map((o)=>{\n                    const voteCount: number = votes[o.id] ? votes[o.id].length : 0;\n                    return <CounterDisplay key={`c-${o.id}`} option={o} count={voteCount} />\n                }) : null}\n            </div>\n\n            <div>\n            Please go to <a target=\"blank\" href={gameUrl}>{gameUrl}</a> to join the game.\n            <div>\n                <QrCode size={256} value={gameUrl} bgColor=\"#FFF\" fgColor=\"#000\" includeMargin/>\n            </div>\n            </div>\n        </div>);\n    }\n}\n\nexport default SocketContainer;","import * as React from 'react';\nimport SocketContainer from './SocketContainer'\nimport { useVoteResultQuery, VoteOption } from '../models/react';\n\nconst PreSocketContainer = (): JSX.Element => {\n  const { data, error, loading } = useVoteResultQuery();\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  if (error || !data) {\n    return <div>ERROR</div>;\n  }\n  const options: Array<VoteOption> = data.allVoteOptions;\n\n  options.sort((x: VoteOption,y: VoteOption)=> {\n    if (x.label < y.label) {\n      return 1;\n    }\n    if (x.label > y.label) {\n      return -1;\n    }\n    return 0;\n  });\n\n  return <SocketContainer options={options} />\n};\nexport default PreSocketContainer;","import React from 'react';\nimport { useMutation } from \"@apollo/react-hooks\";\nimport './CircleButton.css';\n\nimport { CreateVoteDocument } from '../../models/react';\n\ntype CircleButtonProps = {\n  data: {\n    id: string;\n    label: string;\n    background: string;\n  };\n};\n\nfunction CircleButton( { data: {id, label, background} }: CircleButtonProps) {\n  const [submitVote] = useMutation(\n    CreateVoteDocument,\n    { variables: { optionId: id } }\n  );\n  return (\n    <div className={`CircleButton CircleButton-${background}`}>\n      <a href=\"#\" onClick={()=>{\n        submitVote().then((a)=>{\n          try{\n            const {data: {createVote:{id: voteId}}} = a;\n            console.log(`You have voted!\\n record id: ${voteId}`);\n          }catch(ex){\n            alert(ex);\n          }\n        });\n      }} >\n        {label}\n      </a>\n    </div>\n  );\n}\n\nexport default CircleButton;","import React, { Component } from 'react';\nimport { VoteOption } from '../models/react';\nimport CircleButton from '../components/atoms/CircleButton';\n\ninterface Props {\n    options: Array<VoteOption>;\n}\n\nclass ClientPage extends Component<Props> {\n    render(): JSX.Element {\n        const {options}: Props = this.props;\n\n        return (<div>\n            {options ? options.filter((o)=>o.label).map((o: VoteOption) => {\n                return (<CircleButton key={o.id} data={o}/>);\n             }) : ''}\n        </div>);\n    }\n  }\n\nexport default ClientPage;","import React from 'react';\nimport ClientPage from '../pages/ClientPage';\nimport { useVoteResultQuery, VoteOption } from '../models/react';\n\nconst VoteContainer = (): JSX.Element => {\n  const { data, error, loading } = useVoteResultQuery();\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  if (error || !data) {\n    return <div>ERROR</div>;\n  }\n  const options: Array<VoteOption> = data.allVoteOptions;\n\n  options.sort((x: VoteOption,y: VoteOption)=> {\n    if (x.label < y.label) {\n      return 1;\n    }\n    if (x.label > y.label) {\n      return -1;\n    }\n    return 0;\n  });\n\n  return <ClientPage options={options} />\n};\nexport default VoteContainer;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport { PreSocketContainer,  VoteContainer } from './containers';\nimport './App.css';\n\nfunction NavMenu(): JSX.Element {\n  return <nav>\n    <ul>\n      <li>\n        <Link to=\"/\">Default</Link>\n      </li>\n      <li>\n        <Link to=\"/client\">Client</Link>\n      </li>\n      <li>\n        <Link to=\"/dashboard\">Dashboard</Link>\n      </li>\n    </ul>\n  </nav>;\n}\n\nfunction Home(): JSX.Element {\n  return <div>\n    <h4>Please select a feature</h4>\n    {<NavMenu/>}\n  </div>;\n}\n\nconst App = (): JSX.Element => <Router>\n  <div className=\"App\">\n    <section>\n      <Switch>\n        <Route path=\"/dashboard\">\n          <PreSocketContainer />\n        </Route>\n        <Route path=\"/client\">\n          <VoteContainer />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </section>\n  </div>\n</Router>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks';\n\nconst apolloClient = new ApolloClient({\n    uri: '/graphql',\n  });\n  \n\nReactDOM.render(<ApolloProvider client={apolloClient}>\n    <ApolloHooksProvider client={apolloClient}>\n        <App />\n    </ApolloHooksProvider>\n</ApolloProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}